@page "/sell"
@attribute [Authorize]
@inject ISellProductUseCase sellProductUseCase
<h3>Sell Product</h3>
<br />
<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>
@if (sellViewModel != null)
{
    <EditForm Model="sellViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="po">Sales order number</label>
            <InputText id="po" class="form-control" @bind-Value="sellViewModel.SalesOrderNumber"></InputText>
        </div>
        <div class="form-group">
            <label for="inv">Product to sell</label>
            <ViewProductsComponent OnSelectProduct="OnSelectProduct" DisplaySearchResult="true"></ViewProductsComponent>
            <InputText class="form-control" @bind-Value="sellViewModel.ProductName" disabled></InputText>
            @*            <input type="text" class="form-control" disabled value="@SelectedProduct?.ProductName" />
        *@            <input type="hidden" value="@sellViewModel.ProductId" />
            
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="sellViewModel.ProductPrice"></InputNumber>

        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" class="form-control" @bind-Value="sellViewModel.QuantityToSell"></InputNumber>

        </div>
        <button type="submit" class="btn btn-primary mt-3">Produce</button>
    </EditForm>
}
@code {
    private SellViewModel sellViewModel = new SellViewModel();
    private Product selectedProduct;
    private string errorMessage; 
    private void OnValidSubmit()
    {
        if (selectedProduct.Quantity<this.sellViewModel.QuantityToSell)
        {
            errorMessage = $"The quantity of the product is not enough.Only {this.selectedProduct.Quantity} are available ";
            return;
        }
        else { errorMessage = string.Empty; }
        sellProductUseCase.ExecuteAsync(this.sellViewModel.SalesOrderNumber, selectedProduct, sellViewModel.QuantityToSell, "frank");
        this.sellViewModel = new SellViewModel();
        this.selectedProduct=null;
        this.errorMessage = string.Empty;
    }
    private void OnSelectProduct(Product product)
    {
        this.selectedProduct = product;
        sellViewModel.ProductId = product.ProductId;
        sellViewModel.ProductName = product.ProductName;
        sellViewModel.ProductPrice = product.Price;
    }
}
