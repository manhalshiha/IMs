@page "/produce"
@attribute [Authorize]
@inject IProduceProductUseCase produceProductUseCase
@inject IValidateEnoughInventoriesForProducingUseCase validateEnoughInventoriesForProducingUseCase

<ErrorMessageComponent ErrorMessage="@ErrorMessage"></ErrorMessageComponent>
<h3>Produce Product</h3>
<br />

@if (produceViewModel != null)
{
        <EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="form-group">
                <label for="po">Production number</label>
                <InputText id="po" class="form-control" @bind-Value="produceViewModel.ProductionNumber"></InputText>
            </div>
            <div class="form-group">
                <label for="inv">Product to Produce</label>
                <ViewProductsComponent OnSelectProduct="OnSelectProduct" DisplaySearchResult="true"></ViewProductsComponent>
                <InputText class="form-control" @bind-Value="produceViewModel.ProductName" disabled></InputText>
            @*            <input type="text" class="form-control" disabled value="@SelectedProduct?.ProductName" />
        *@            <input type="hidden" value="@produceViewModel.ProductId" />
            @if (SelectedProduct != null)
            {
                <text>Price:</text>
                @SelectedProduct?.Price.ToString("c")
            }
            </div>
            <div class="form-group">
                <label for="qty">Quantity</label>
                <InputNumber id="qty" class="form-control" @bind-Value="produceViewModel.QuantityToProduce"></InputNumber>

            </div>
            <button type="submit" class="btn btn-primary mt-3">Produce</button>
        </EditForm>
}
@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product SelectedProduct;
    private string ErrorMessage;
    private async Task OnValidSubmit()
    {
        if (! await this.validateEnoughInventoriesForProducingUseCase.ExecuteAsync(this.SelectedProduct,this.produceViewModel.QuantityToProduce))
        {
            ErrorMessage = $"The inventories are not enough for producing {this.SelectedProduct.ProductName} × {this.produceViewModel.QuantityToProduce} times ";
            return;
        }
        else{ ErrorMessage = string.Empty; }
        await this.produceProductUseCase.ExecuteAsync(produceViewModel.ProductionNumber, SelectedProduct, produceViewModel.QuantityToProduce, "frank");
        this.produceViewModel=new ProduceViewModel();
        this.SelectedProduct = null;
        this.ErrorMessage = string.Empty;
    }
    private void OnSelectProduct(Product product){
        this.SelectedProduct = product;
        this.produceViewModel.ProductId = product.ProductId;
        this.produceViewModel.ProductName = product.ProductName;
    }
}
